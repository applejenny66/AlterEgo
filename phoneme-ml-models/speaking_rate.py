from __future__ import division
import config
import json
import data_proc
import numpy as np
import statistics

sample_rate = 250
num_samples = 153
channels = range(0, 8)
label_map = [[8, 20, 25], [1, 33, 27, 7, 22, 13, 22], [2, 21, 4], [1, 34], [6, 22, 10, 28, 9, 23], [0, 15, 10, 11], [32, 1, 20], [32, 1, 20, 8, 20], [32, 1, 15], [32, 1, 28, 24, 13, 34], [32, 6, 15], [32, 6, 15, 24, 13, 34], [32, 24, 9, 23], [32, 5], [20, 1, 22], [20, 1, 22, 27], [20, 1, 22, 0, 27], [14, 8, 22, 19], [14, 5, 22, 10, 30], [20, 2, 34, 31, 29, 13, 27, 7], [20, 13, 21, 7], [20, 12, 15], [20, 12, 15, 2, 22, 27], [15, 9, 20, 24, 10, 25], [15, 9, 35, 5, 25], [15, 9, 33, 7, 2, 22, 27], [15, 4, 22], [15, 24, 9, 23, 20], [10, 27], [9, 23, 17, 21, 9, 26], [10, 35, 22, 9, 23], [9, 17, 30, 3, 25, 27, 9, 15], [33, 0, 24], [33, 10, 21], [33, 6, 14], [19, 7, 34, 2, 22], [17, 6, 27], [17, 6, 27, 9, 23], [17, 11], [17, 12, 15], [17, 12, 15, 32, 5], [18, 1, 35], [18, 1, 35, 9, 23], [18, 6, 15], [18, 6, 15, 8, 20], [18, 10, 24], [18, 10, 27], [18, 10, 27, 9, 23], [18, 2, 21, 11], [18, 6, 21, 31], [18, 8], [18, 5], [18, 0, 27, 7], [18, 2, 23, 17, 24, 10], [18, 7, 27, 9, 23], [18, 7, 27, 25], [9, 22], [9, 22, 20, 24, 10, 25], [9, 22, 27, 13], [9, 30], [9, 27], [9, 27, 25], [19, 13, 25], [20, 9, 14, 2, 22], [20, 3, 24, 10, 2, 22], [21, 1, 34, 31], [21, 1, 23, 17, 36, 2, 19], [21, 1, 23, 17, 36, 2, 19, 2, 30], [21, 8, 27, 7], [21, 6, 25], [21, 6, 35, 2, 21, 30], [21, 5], [21, 5, 27], [21, 5, 27, 25], [21, 0, 27], [21, 4, 15], [21, 4, 15, 7], [21, 11], [21, 11, 7], [34, 8, 22], [34, 8, 20], [34, 1, 20, 25], [34, 10], [34, 3, 24], [34, 3, 24, 22, 9, 23], [34, 2, 14], [34, 29, 13, 30, 9, 20], [34, 29, 13, 27], [34, 5], [22, 1, 31], [22, 10, 15], [22, 13, 30, 31, 8, 31, 7], [22, 4], [2, 35], [3, 33], [11, 20, 8], [0, 22], [11, 31, 2, 22], [31, 8, 22], [31, 8, 22, 30], [31, 3, 30], [33, 11, 22], [33, 11, 22, 30], [31, 21, 8], [31, 21, 10, 30], [31, 24, 1, 20, 27, 9, 25], [31, 12, 27], [20, 36, 5, 2, 27], [20, 36, 5, 2, 27, 7], [24, 10, 32, 13, 27], [24, 9, 15, 13, 25], [24, 10, 25, 27, 0, 24, 27], [24, 9, 30, 13, 34], [25, 10], [25, 6, 27], [25, 6, 27, 9, 23, 30], [26, 13, 30], [25, 21, 10, 31], [25, 11], [25, 0, 20, 25], [25, 0, 33, 27, 7], [25, 2, 34], [25, 2, 34, 28, 9, 23], [25, 13, 22], [25, 4, 22, 15], [25, 27, 0, 24, 27], [25, 27, 0, 31], [25, 36, 9, 14], [25, 9, 25, 27, 2, 34], [27, 8, 20], [27, 6, 34, 31, 24, 2, 14, 7], [28, 1, 23, 20], [28, 1, 23, 20, 25], [16, 1, 27], [16, 1, 27, 25], [16, 2], [28, 7, 25, 27, 10], [16, 9, 25], [27, 5, 7, 15], [27, 13], [27, 13], [27, 7, 22], [27, 10, 35, 10], [2, 31], [29, 13, 25], [35, 6, 24, 10], [35, 9, 15, 10, 11], [35, 0, 21, 29, 13, 34], [36, 0, 22, 27], [36, 0, 26, 24, 13, 34], [36, 0, 14], [36, 3, 27, 7], [29, 13], [8, 20, 25], [1, 33, 27, 7, 22, 13, 22], [2, 21, 4], [1, 34], [6, 22, 10, 28, 9, 23], [0, 15, 10, 11], [32, 1, 20], [32, 1, 20, 8, 20], [32, 1, 15], [32, 1, 28, 24, 13, 34], [32, 6, 15], [32, 6, 15, 24, 13, 34], [32, 24, 9, 23], [32, 5], [20, 1, 22], [20, 1, 22, 27], [20, 1, 22, 0, 27], [14, 8, 22, 19], [14, 5, 22, 10, 30], [20, 2, 34, 31, 29, 13, 27, 7], [20, 13, 21, 7], [20, 12, 15], [20, 12, 15, 2, 22, 27], [15, 9, 20, 24, 10, 25], [15, 9, 35, 5, 25], [15, 9, 33, 7, 2, 22, 27], [15, 4, 22], [15, 24, 9, 23, 20], [10, 27], [9, 23, 17, 21, 9, 26], [10, 35, 22, 9, 23], [9, 17, 30, 3, 25, 27, 9, 15], [33, 0, 24], [33, 10, 21], [33, 6, 14], [19, 7, 34, 2, 22], [17, 6, 27], [17, 6, 27, 9, 23], [17, 11], [17, 12, 15], [17, 12, 15, 32, 5], [18, 1, 35], [18, 1, 35, 9, 23], [18, 6, 15], [18, 6, 15, 8, 20], [18, 10, 24], [18, 10, 27], [18, 10, 27, 9, 23], [18, 2, 21, 11], [18, 6, 21, 31], [18, 8], [18, 5], [18, 0, 27, 7], [18, 2, 23, 17, 24, 10], [18, 7, 27, 9, 23], [18, 7, 27, 25], [9, 22], [9, 22, 20, 24, 10, 25], [9, 22, 27, 13], [9, 30], [9, 27], [9, 27, 25], [19, 13, 25], [20, 9, 14, 2, 22], [20, 3, 24, 10, 2, 22], [21, 1, 34, 31], [21, 1, 23, 17, 36, 2, 19], [21, 1, 23, 17, 36, 2, 19, 2, 30], [21, 8, 27, 7], [21, 6, 25], [21, 6, 35, 2, 21, 30], [21, 5], [21, 5, 27], [21, 5, 27, 25], [21, 0, 27], [21, 4, 15], [21, 4, 15, 7], [21, 11], [21, 11, 7], [34, 8, 22], [34, 8, 20], [34, 1, 20, 25], [34, 10], [34, 3, 24], [34, 3, 24, 22, 9, 23], [34, 2, 14], [34, 29, 13, 30, 9, 20], [34, 29, 13, 27], [34, 5], [22, 1, 31], [22, 10, 15], [22, 13, 30, 31, 8, 31, 7], [22, 4], [2, 35], [3, 33], [11, 20, 8], [0, 22], [11, 31, 2, 22], [31, 8, 22], [31, 8, 22, 30], [31, 3, 30], [33, 11, 22], [33, 11, 22, 30], [31, 21, 8], [31, 21, 10, 30], [31, 24, 1, 20, 27, 9, 25], [31, 12, 27], [20, 36, 5, 2, 27], [20, 36, 5, 2, 27, 7], [24, 10, 32, 13, 27], [24, 9, 15, 13, 25], [24, 10, 25, 27, 0, 24, 27], [24, 9, 30, 13, 34], [25, 10], [25, 6, 27], [25, 6, 27, 9, 23, 30], [26, 13, 30], [25, 21, 10, 31], [25, 11], [25, 0, 20, 25], [25, 0, 33, 27, 7], [25, 2, 34], [25, 2, 34, 28, 9, 23], [25, 13, 22], [25, 4, 22, 15], [25, 27, 0, 24, 27], [25, 27, 0, 31], [25, 36, 9, 14], [25, 9, 25, 27, 2, 34], [27, 8, 20], [27, 6, 34, 31, 24, 2, 14, 7], [28, 1, 23, 20], [28, 1, 23, 20, 25], [16, 1, 27], [16, 1, 27, 25], [16, 2], [28, 7, 25, 27, 10], [16, 9, 25], [27, 5, 7, 15], [27, 13], [27, 13], [27, 7, 22], [27, 10, 35, 10], [2, 31], [29, 13, 25], [35, 6, 24, 10], [35, 9, 15, 10, 11], [35, 0, 21, 29, 13, 34], [36, 0, 22, 27], [36, 0, 26, 24, 13, 34], [36, 0, 14], [36, 3, 27, 7], [29, 13]]

# Read config file
with open(config.data_maps, 'r') as f:
    input_data = json.load(f)

# Read input files
training_files = []
for data_file in input_data:
    if data_file['type'] == 'phonemes_common_utkarsh':
        train_file = data_proc.process_scrambled(data_file['labels'], [config.file_path + data_file['filename']],
                                                 channels=channels,
                                                 sample_rate=sample_rate, surrounding=0,
                                                 exclude=set([]),
                                                 num_classes=num_samples)
        training_files.append(train_file)

print("Combining input files...")
training_sequence_groups = data_proc.combine(training_files)

print("Training sequences:")
print(len(training_sequence_groups), " sequences")
lens = map(len, data_proc.get_inputs(training_sequence_groups)[0])
print min(lens), np.mean(lens), max(lens)

t_min, t_av, t_max = min(lens)/250, np.mean(lens)/250, max(lens)/250
print 'Avg rate :', statistics.mean(map(len, label_map))/t_av